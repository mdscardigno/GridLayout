:root {
  font: 16px / 1 sans-serif;
}
html {
  height: 100%;
}
body {
  margin: 0;
  min-height: 100%;
}
/*
In this example, we divide the container into three columns of the same width by setting grid-template-columns to auto auto auto. We also add a gap between columns and rows by setting a grid-gap.
Try adding columns to the layout by changing grid-template-columns.*/

.wrapper {
  display: grid;
  grid-template-columns: auto auto auto auto;
  grid-gap: 10px;
}
/*give the divs some styles*/
.wrapper > div {
  border-radius: 5px;
  background-color: rgb(207, 232, 220);
  padding: 1em;
}
/*
In the example above, we allowed the grid to organize each child element by placing them inside the next available grid cell. 
You can override this default behavior specifying a grid-column and a grid-row.
Note how grid-column-end is non inclusive. Meaning, the cell area will end before the specified column.
*/

/*Manually position each child within the grid */

.one {
  grid-column: 2;
  grid-row: 1;
}
.two {
  grid-column: 1;
  grid-row: 2;
}
.three {
  grid-column-start: 1;
  grid-column-end: 3;
  grid-row: 3;
}
/*Children that occupy the same cell will overlap.*/
.one {
  background-color: rgb(0, 220, 0.5) !important;
  grid-column: 1;
  grid-column-end: 3;
  grid-row: 1;
  grid-row-end: 4;
}
.two {
  color: #fff;
  background-color: rgb(20, 39, 20) !important;
  grid-column: 2;
  grid-column-end: 4;
  grid-row: 2;
  grid-row-end: 4;
}
